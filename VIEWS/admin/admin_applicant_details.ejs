<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <script src="/function/Babel.js"></script>
    <script src="/function/React.js"></script>
    <script src="/function/ReactDOM.js"></script>
    <link rel="shortcut icon" href="/PUBLIC/ASSETS/IMAGES/favicon.png" type="image/x-icon">
    <link rel="stylesheet" href="/PUBLIC/CSS/recruiter_style.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

    <script crossorigin src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <title>Admin Dashboard | Everything.india</title>
    <style>
        .profile-pic {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin: 0 auto;
            background-color: #fff;
            box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
            object-fit: contain;
        }
        .details-form-content-box form .details-form-left .applicant_image {
            height: 15rem;
            width: 15rem;
            border-radius: 50%;
            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
            object-fit: cover;
        }
        .status-active {
            color: green;
            font-weight: bold;
        }
        .status-blocked {
            color: red;
            font-weight: bold;
        }
        .toast-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #4CAF50;
            color: white;
            padding: 16px;
            border-radius: 4px;
            z-index: 1000;
            display: none;
        }
        .filter-container {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <section class="recruiter-section">
        <nav class="recruiter-navigation" id="sidenavbar"></nav>
        <div class="recruiter-main-container">
            <header class="recruiter-header" id="recruiter_header"></header>
            <div id="toast-notification" class="toast-notification"></div>
            <div class="recruiter-application-container" id="application-container"></div>
            
            <footer>
                <div class="footerContainer" id="footer"></div>
            </footer>
        </div>
    </section>

    <script type="text/babel" src="/PUBLIC/components/AdminSideNavBar.js"></script>
    <script type="text/babel" src="/PUBLIC/components/RecruiterHeader.js"></script>
    <script type="text/babel" src="/PUBLIC/COMPONENTS/RecruiterFooter.js"></script>

    <script type="text/babel">
        const profilePic = "<%= profilePic %>";
        const username = "<%= username %>";
        const toastNotification = "<%= toastNotification %>";
        console.log('profile pic val: ' + profilePic);
        console.log(profilePic);

        // Show toast notification if present
        if (toastNotification) {
            const toast = document.getElementById('toast-notification');
            toast.textContent = toastNotification;
            toast.style.display = 'block';
            setTimeout(() => {
                toast.style.display = 'none';
            }, 3000);
        }

        const { useEffect, useState } = React;

        function App() {
            const [users, setUsers] = useState([]);
            const [selectedUser, setSelectedUser] = useState({
                _id: '',
                name: '',
                email: '',
                password: '',
                role: '',
                status: '',
                profile_pic_code: ''
            });
            const [currentPage, setCurrentPage] = useState(1);
            const [filters, setFilters] = useState({ role: '', status: '' });
            const itemsPerPage = 5;

            const BASE_URL = window.location.hostname === 'localhost' ? 'http://localhost:5000' : 'https://your-vercel-url.vercel.app';

            useEffect(() => {
                fetchUsers();
            }, []);

            const fetchUsers = () => {
                axios.get(`${BASE_URL}/api/admin/users`, {
                    credentials: "include",
                }).catch((error) => {
                    console.error("Error fetching users:", error);
                });
            };

            const fetchFilteredUsers = () => 
                axios.get(`${BASE_URL}/api/admin/filter-users`, {
                    credentials: "include",
                }).then((response)=>{
                    setRecruiterList(response.data.rows);
                }).catch((error) => {
                    console.error("Error fetching filtered users:", error);
                });
            };

            const handleUserSelect = (userId) => {
                axios.get(`${BASE_URL}/api/admin/user-details/${userId}`).then((response) => {
                    credentials: "include";
                    const userData = response.data.userData;
                    setSelectedUser({
                        _id: userData._id,
                        name: userData.name || '',
                        email: userData.email || '',
                        password: '',
                        role: userData.role || '',
                        status: userData.status || '',
                        profile_pic_code: userData.profile_pic_code || ''
                    });
                }).catch((error) => {
                    console.error("Error fetching user details:", error);
                });
            };

            const handleInputChange = (e) => {
                const { name, value } = e.target;
                setSelectedUser((prevUser) => ({
                    ...prevUser,
                    [name]: value,
                }));
            };

            const handleFilterChange = (e) => {
                const { name, value } = e.target;
                setFilters((prevFilters) => ({
                    ...prevFilters,
                    [name]: value,
                }));
            };

            const handleBlockUser = (userId, currentStatus) => {
                const newStatus = currentStatus === 'active' ? '0' : '1';
                window.location.href = `/api/admin/take-action?user_id=${userId}&isActive=${newStatus}`;
            };

            const handleDeleteUser = (userId) => {
                if (window.confirm('Are you sure you want to delete this user?')) {
                    window.location.href = `/api/admin/delete-user?user_id=${userId}`;
                }
            };

            const indexOfLastUser = currentPage * itemsPerPage;
            const indexOfFirstUser = indexOfLastUser - itemsPerPage;
            const currentUsers = users.slice(indexOfFirstUser, indexOfLastUser);

            const totalPages = Math.ceil(users.length / itemsPerPage);

            const handlePageChange = (pageNumber) => {
                setCurrentPage(pageNumber);
            };

            return (
                <>
                    <div className="details-form-container">
                        <div className="details-form-title-box">
                            <h2>User Management</h2>
                        </div>
                        
                        <div className="filter-container">
                            <div className="dropbox_filter">
                                <select className="sel_box" name="role" onChange={(e) => handleFilterChange(e)} value={filters.role}>
                                    <option value="">All Roles</option>
                                    <option value="user">User</option>
                                    <option value="admin">Admin</option>
                                    <option value="recruiter">Recruiter</option>
                                </select>
                            </div>
                            <div className="dropbox_filter">
                                <select className="sel_box" name="status" onChange={(e) => handleFilterChange(e)} value={filters.status}>
                                    <option value="">All Status</option>
                                    <option value="active">Active</option>
                                    <option value="blocked">Blocked</option>
                                </select>
                            </div>
                            <button onClick={fetchFilteredUsers} className="filter-btn">Apply Filters</button>
                        </div>

                        <div className="details-form-content-box">
                            <form action={`/api/admin/update-user/${selectedUser._id}`} method="post">
                                <div className="details-form-left">
                                    <div className="image-box">
                                        <img src={selectedUser.profile_pic_code ? `/PUBLIC/ASSETS/UPLOADS/profile_images/${selectedUser.profile_pic_code}` : "/PUBLIC/ASSETS/IMAGES/default-profile.png"} alt="profile-pic" className="applicant_image" />
                                    </div>
                                </div>
                                <div className="details-form-right">
                                    <div className="detail-form-row">
                                        <div className="detail-form-input-box">
                                            <label htmlFor="name">Name</label>
                                            <input type="text" name="name" id="name" placeholder="Name" value={selectedUser.name} onChange={handleInputChange} />
                                        </div>
                                        <div className="detail-form-input-box">
                                            <label htmlFor="email">Email</label>
                                            <input type="email" name="email" id="email" placeholder="Email" value={selectedUser.email} onChange={handleInputChange} />
                                        </div>
                                    </div>
                                    <div className="detail-form-row">
                                        <div className="detail-form-input-box">
                                            <label htmlFor="password">Password</label>
                                            <input type="password" name="password" id="password" placeholder="New Password" onChange={handleInputChange} />
                                            <i className="fa-solid fa-eye-slash"></i>
                                        </div>
                                        <div className="detail-form-input-box">
                                            <label htmlFor="role">Role</label>
                                            <select name="role" id="role" value={selectedUser.role} onChange={handleInputChange}>
                                                <option value="">Select Role</option>
                                                <option value="user">User</option>
                                                <option value="admin">Admin</option>
                                                <option value="recruiter">Recruiter</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div className="detail-form-row">
                                        <div className="detail-form-input-box">
                                            <label htmlFor="status">Account Status</label>
                                            <select name="status" id="status" value={selectedUser.status} onChange={handleInputChange}>
                                                <option value="">Select Status</option>
                                                <option value="active">Active</option>
                                                <option value="blocked">Blocked</option>
                                            </select>
                                        </div>
                                    </div>
                                    <button type="submit" className="update-btn" disabled={!selectedUser._id}>Update User</button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div className="table-box">
                        <div className="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {currentUsers.map((user, index) => (
                                        <tr key={index}>
                                            <td>{user.name}</td>
                                            <td>{user.email}</td>
                                            <td>{user.role}</td>
                                            <td className={user.status === 'active' ? 'status-active' : 'status-blocked'}>
                                                {user.status}
                                            </td>
                                            <td>
                                                <button onClick={() => handleUserSelect(user._id)} className="action-btn edit">
                                                    <i className="fa-solid fa-edit"></i>
                                                </button>
                                                <button onClick={() => handleBlockUser(user._id, user.status)} className="action-btn block">
                                                    <i className={user.status === 'active' ? 'fa-solid fa-ban' : 'fa-solid fa-check'}></i>
                                                </button>
                                                <button onClick={() => handleDeleteUser(user._id)} className="action-btn delete">
                                                    <i className="fa-solid fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                        <div className="page-number-box">
                            <h3>Pages</h3>
                            <div className="pageNumberContent">
                                {Array.from({ length: totalPages }, (_, index) => (
                                    <div
                                        key={index}
                                        className={`pagenumber ${currentPage === index + 1 ? 'active' : ''}`}
                                        onClick={() => handlePageChange(index + 1)}
                                    >
                                        {index + 1}
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </>
            );
        

        ReactDOM.createRoot(document.getElementById('sidenavbar')).render(
            <AdminSideNavBar />
        );

        ReactDOM.createRoot(document.getElementById('recruiter_header')).render(
            <RecruiterHeader title='Admin Panel' profilePic={profilePic} username={username} />
        );

        ReactDOM.createRoot(document.getElementById('application-container')).render(
            <App />
        );

        ReactDOM.render(<RecruiterFooter />, document.getElementById("footer"));

    </script>
</body>
</html>